<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="965" height="400"
				styleName="background" applicationComplete="init()" xmlns:local="*">
	<mx:Style source="assets/style.css"/>
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.events.Event;
			import flash.media.Sound;
			import flash.net.URLRequest;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.UIComponent;
			import mx.effects.Fade;
			import mx.effects.Move;
			import mx.events.EffectEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import uk.co.soulwire.cv.MotionTracker;
			
			var itemManager:ItemManager = new ItemManager();
			var frontBeltEllipse:Ellipse = new Ellipse();
			var backBeltEllipse:Ellipse = new Ellipse();
			var dummyBeltEllipse:Ellipse = new Ellipse();
			var itemsInFrontBelt:ArrayCollection = new ArrayCollection();
			var itemsInBackBelt:ArrayCollection = new ArrayCollection();
			var moveEffectOfFork:Move = new Move();
			var totalScore:int = 0;
			var scoreMultipliedBy = 1;
			var remainingTime:int;
			var mainTimer:Timer;
			
			// Sound variables
			[Embed(source="assets/Background1.mp3")]
			[Bindable]
			var sound1Class:Class;
			[Embed(source="assets/Background4.mp3")]
			[Bindable]
			var sound2Class:Class;
			[Embed(source="assets/ItemTaken.mp3")]
			[Bindable]
			var sound3Class:Class;			
			var background1:Sound = new Sound();
			var background4:Sound = new Sound();
			var itemTaken:Sound = new Sound();
			var background1Channel:SoundChannel;
			var background4Channel:SoundChannel;
			var itemTakenChannel:SoundChannel;
			
			const TOTAL_TIME = 40 * 1000; //TODO
			
			const MAIN_TIMER_INTERVAL:int = 10;
			const SPEED_CHANGE_AFTER:int = 3000;
			var mainTimerCounter:int = 0;
			
			const GAME_PLAY_AREA_X:int = 18;
			const GAME_PLAY_AREA_Y:int = 9;
			const GAME_PLAY_AREA_W:int = 704;
			const GAME_PLAY_AREA_H:int = 383;
			
			const FORK_Y:int = -195;
			const FORK_CATCHABLE_AREA_X = 18;
			const FORK_CATCHABLE_AREA_W = 44 - 18;
			
			const N_GIFTS = 3;
			var giftTimes:Array;
			
			const N_EMPTY_DISK = Math.floor(TOTAL_TIME / (10*1000));
			var emptyDiskTimes:Array;
			
			public static var _highscoreList;

			function initTimes() {
				giftTimes = new Array();
				for (var i = 0;  i < N_GIFTS; i++) {
					giftTimes.push(Math.random() * TOTAL_TIME);
				}
				
				emptyDiskTimes = new Array();
				for (var i = 0; i < N_EMPTY_DISK; i++) {
					emptyDiskTimes.push(Math.random() * TOTAL_TIME);
				}
			}
			
			function init() {
				_highscoreList = hightscoreList;
				
				// Init sounds
				background1 = new sound1Class() as Sound;
				background4 = new sound2Class() as Sound;
				itemTaken = new sound3Class() as Sound;
				
				this.frontBeltEllipse.center = new Point(gamePlayArea.width / 2, gamePlayArea.height / 2 + 20);
				this.frontBeltEllipse.a = gamePlayArea.width / 2 + 200;
				this.frontBeltEllipse.b = 140;
				
				this.backBeltEllipse.center = new Point(gamePlayArea.width / 2, gamePlayArea.height / 2);
				this.backBeltEllipse.a = gamePlayArea.width / 2 + 100;
				this.backBeltEllipse.b = 40;
				
				this.dummyBeltEllipse.center = new Point(gamePlayArea.width / 2, gamePlayArea.height / 2 + 50);
				this.dummyBeltEllipse.a = this.backBeltEllipse.a;
				this.dummyBeltEllipse.b = this.backBeltEllipse.b;
				
				this.moveEffectOfFork.target = fork;
				
				updateHighscoreList();
				
				displayIntroPopup();
				
//				var userInformationPopup:UserInformationPopup = new UserInformationPopup();
//				PopUpManager.addPopUp(userInformationPopup, Application.application as NoodleRoulette, false);
			}
			
			public function displayIntroPopup() {
				var intro:IntroPopup = new IntroPopup();
				intro.addChild(_highscoreList);
				PopUpManager.addPopUp(intro, this, false);
			}
				
			
			public function updateHighscoreList() {
				hightscoreList.removeAllChildren();
				httpGetHightScoreList.send(null);
			}
			
			public static function centerUIComponent(parentUI:UIComponent, child:UIComponent) {
				child.x = parentUI.width/2 - child.width/2;
				child.y = parentUI.height/2 - child.height/2;
			}
			
			public function startCountDown() {
				addChild(_highscoreList);
				txtCountDown.text = "3";
				txtCountDown.visible = true;
				zoomIn.play([txtCountDown]);
				var countDownTimer:Timer = new Timer(1000, 4);
				var countDown = 3;
				countDownTimer.addEventListener(TimerEvent.TIMER,
					function(event:Event) {
						countDown--;
						if (countDown > 0) {
							txtCountDown.text = countDown;
							zoomIn.play([txtCountDown]);
						} else if (countDown == 0) {
							txtCountDown.text = "GO";
							zoomIn.play([txtCountDown]);
						} else {
							txtCountDown.visible = false;
							countDownTimer.stop();
							startRoullete();
						}
					}
				);
				countDownTimer.start();
			}
			
			public function startRoullete():void {
				score.visible = true;
				initTimes();
				remainingTime = TOTAL_TIME;
				mainTimer = new Timer(MAIN_TIMER_INTERVAL, 0);
				mainTimer.addEventListener(TimerEvent.TIMER, onTimer);
				mainTimer.start();
				
				// Play background sound
				background1Channel = background1.play(0,30);
			}
			
			public function stopGame() {
				mainTimer.stop();
				disableCurrentMode();
				itemManager.stopAll();
				
				// Stop sound
				background4Channel.stop();
			}
			
			var lastDummyItem;
			var lastAllocateTime = MAIN_TIMER_INTERVAL;
			function onTimer(event:TimerEvent) {
				mainTimerCounter += MAIN_TIMER_INTERVAL;
				if (mainTimerCounter > SPEED_CHANGE_AFTER) {
					mainTimerCounter = 0;
					var rate:Number = Math.random() + 0.3;
					itemManager.setSpeedRate(rate);
				}
				
				//handle remaining time
				remainingTime -= MAIN_TIMER_INTERVAL;
				if (remainingTime <= 0) {
					stopGame();
					finishBackground.visible = true;
					var temp:Timer = new Timer(3000, 1);
					temp.addEventListener(TimerEvent.TIMER,
						function(event:Event) {
							finishBackground.visible = false;
							var userInformationPopup:UserInformationPopup = new UserInformationPopup();
							userInformationPopup.addChild(_highscoreList);
							PopUpManager.addPopUp(userInformationPopup, Application.application as NoodleRoulette, false);
						}
					);
					temp.start();
					return;
				}
				var min:int = remainingTime / (60 * 1000);
				var sec:int = (remainingTime - min * 60 * 1000) / 1000;
				time.text = (min < 10 ? "0" : "") + min + ":" + (sec < 10 ? "0" : "") + sec;
				
				// Play other sound
				if (remainingTime <= 30 * 1000 && background4Channel == null) {
					background1Channel.stop();
					background4Channel = background4.play(0,2);
				}
				
				//handle back belt
				if (itemsInFrontBelt.length > 0) {
					var firstItem:Item = itemsInFrontBelt.getItemAt(0) as Item;
					if (!firstItem.isUsed()) {
						itemsInFrontBelt.removeItemAt(0);
						itemsInBackBelt.addItem(firstItem);
						initForBackBelt(firstItem.moveEffect);
						firstItem.moveEffect.start();
					}
				}
				
				//handle front belt
				var needNewItem:Boolean = false;
				if (itemsInFrontBelt.length == 0) {
					needNewItem = true;
				} else {
					var lastItem:Item = itemsInFrontBelt.getItemAt(itemsInFrontBelt.length - 1) as Item;
					if (Math.abs(lastItem.moveEffect.x - lastItem.moveEffect.fromX) > 100) {
						needNewItem = true;
					}
				}

				if (needNewItem) {
					var needGift = false;
					for (var i = 0; i < giftTimes.length; i++) {
						if (remainingTime <= giftTimes[i] && giftTimes[i] <= lastAllocateTime) {
							needGift = true;
							break;
						}
					}
					
					if (needGift) {
						var gift:Item = itemManager.allocateGiftItem();
						gamePlayArea.addChild(gift.image);
						itemsInFrontBelt.addItem(gift);
						initForFrontBelt(gift.moveEffect);
						gift.moveEffect.start();
					} else {
						var idx = getRandomIdx();
						var isEmptyDisk = false;
						if (idx != itemManager.items.length - 2 - 1) {
							var disk:Item = itemManager.allocateDiskItem();
							gamePlayArea.addChild(disk.image);
							itemsInFrontBelt.addItem(disk);
							initForFrontBelt(disk.moveEffect);
							disk.moveEffect.start();
							
							for (var i = 0; i < emptyDiskTimes.length; i++) {
								if (remainingTime <= emptyDiskTimes[i] && emptyDiskTimes[i] <= lastAllocateTime) {
									isEmptyDisk = true;
									break;
								}
							}
						}
						
						if (!isEmptyDisk) {
							var item:Item = itemManager.allocateItem(idx);
							gamePlayArea.addChild(item.image);
							itemsInFrontBelt.addItem(item);
							initForFrontBelt(item.moveEffect);
							item.moveEffect.start();
						}
					}
					lastAllocateTime = remainingTime;
				}
				
				//handle dummy belt
				needNewItem = false;
				if (lastDummyItem == null || Math.abs(lastDummyItem.moveEffect.x - lastDummyItem.moveEffect.fromX) > 100) {
					var disk:Item = itemManager.allocateDiskItem();
					gamePlayArea.addChild(disk.image);
					initForDummyBelt(disk.moveEffect);
					disk.moveEffect.start();
					
					var dummyItem:Item = itemManager.allocateItem(getRandomIdx());
					gamePlayArea.addChild(dummyItem.image);
					lastDummyItem = dummyItem;
					initForDummyBelt(dummyItem.moveEffect);
					dummyItem.moveEffect.start();
				}
			}
			
			public function getRandomIdx():int {
				return Math.floor(Math.random() * (itemManager.items.length - 2));
			}
			
			public function initForFrontBelt(ellipseMove:EllipseMove):EllipseMove {
				return ellipseMove.init(ellipseMove.move.target, frontBeltEllipse.center, 
					frontBeltEllipse.a, frontBeltEllipse.b, 
					-frontBeltEllipse.a, frontBeltEllipse.a);
			}
			
			public function initForBackBelt(ellipseMove:EllipseMove):EllipseMove {
				return ellipseMove.init(ellipseMove.move.target, backBeltEllipse.center, 
					backBeltEllipse.a, backBeltEllipse.b, 
					backBeltEllipse.a, -backBeltEllipse.a,
					true);
			}
			
			public function initForDummyBelt(ellipseMove:EllipseMove):EllipseMove {
				return ellipseMove.init(ellipseMove.move.target, dummyBeltEllipse.center, 
					dummyBeltEllipse.a, dummyBeltEllipse.b, 
					-dummyBeltEllipse.a, dummyBeltEllipse.a,
					true, true);
			}
			
			public function moveForkHorizontally(xBy:int):void {
				if (fork.x + xBy < 0 || fork.x + FORK_CATCHABLE_AREA_X + FORK_CATCHABLE_AREA_W + xBy > forkContainer.width) return;
				this.moveEffectOfFork.stop();
				this.moveEffectOfFork.xBy = xBy;
				this.moveEffectOfFork.yBy = 0;
				this.moveEffectOfFork.duration = 100;
				this.moveEffectOfFork.play();
			}
			
			public function forkDown():void {
				this.disableCurrentMode();
				this.moveEffectOfFork.stop();
				var forkDownEffect:Move = new Move();
				forkDownEffect.target = fork;
				forkDownEffect.xBy = 0;
				forkDownEffect.yBy = 200;
				forkDownEffect.duration = 300;
				forkDownEffect.addEventListener(EffectEvent.EFFECT_END,
					function(event:EffectEvent) {
						var moveEffectOfForkAndItem:Move = new Move();
						moveEffectOfForkAndItem.duration = 500;
						var caughtItem:Item;
						for (var i:int = 0; i < itemsInFrontBelt.length; i++) {
							var item:Item = itemsInFrontBelt.getItemAt(i) as Item;
							if (!item.isDisk && isCaught(item.image)) {
								itemsInFrontBelt.removeItemAt( itemsInFrontBelt.getItemIndex(item) );
								item.moveEffect.freeze();
								if (gamePlayArea.getChildIndex(item.image) >= 0) {
									gamePlayArea.removeChild(item.image);
								}
								addChild(item.image);
								
								moveEffectOfForkAndItem.targets = new Array(fork, item.image);
								caughtItem = item;
								break;
							}
						}
						if (caughtItem != null) {
							// Play sound
							itemTaken.play();
							
							moveEffectOfForkAndItem.xBy = ((bowl.x + bowl.width/2) - fork.width/2 - forkContainer.x) - fork.x + 110;
							moveEffectOfForkAndItem.yBy = FORK_Y-fork.y;
							var isMEOFAIEnded:Boolean = false;
							moveEffectOfForkAndItem.addEventListener(EffectEvent.EFFECT_END,
								function(event:Event) {
									if (isMEOFAIEnded) {
										return;
									}
									isMEOFAIEnded = true;
									initCurrentMode();
									var dropItemEffect:Move = new Move();
									dropItemEffect.target = caughtItem.image;
									dropItemEffect.duration = 500;
									dropItemEffect.yBy = 100;
									dropItemEffect.addEventListener(EffectEvent.EFFECT_END,
										function(event:Event) {
											var disappear:Fade = new Fade();
											disappear.target = caughtItem.image;
											disappear.alphaFrom = 1;
											disappear.alphaTo = 0;
											disappear.duration = 300;
											disappear.addEventListener(EffectEvent.EFFECT_END, 
												function(event:Event) {
													caughtItem.moveEffect.unfreeze();
													totalScore += caughtItem.score * scoreMultipliedBy;
													score.text = totalScore.toString();
													caughtItem = null;
												}
											);
											
											disappear.play();
										}
									);
									dropItemEffect.play();
								}
							);
						} else {
							moveEffectOfForkAndItem.target = fork;
							moveEffectOfForkAndItem.yBy = FORK_Y - fork.y;
							moveEffectOfForkAndItem.addEventListener(EffectEvent.EFFECT_END,
								function(event:Event) {
									initCurrentMode();	
									caughtItem = null;
								}
							);
						}
						moveEffectOfForkAndItem.play();
					}
				);
				forkDownEffect.play();
			}
			
			function isCaught(target:UIComponent):Boolean {
				var forkRect:Rectangle = new Rectangle(fork.x + FORK_CATCHABLE_AREA_X, fork.y, FORK_CATCHABLE_AREA_W, fork.height);
				var targetRect:Rectangle = new Rectangle(target.x + target.width / 6, target.y, target.width * 2 / 3, target.height);
				
				if (!forkRect.intersects(targetRect)) return false;
				
				var intersectRect = forkRect.intersection(targetRect);
				return intersectRect.width > forkRect.width * 2 / 3;
			}
			
			public const CONTROL_MODE_KEYBOARD = 1;
			public const CONTROL_MODE_MOUSE = 2;
			public const CONTROL_MODE_WEBCAM = 3;
			var controlMode:int;
			
			public function initKeyboardMode() {
				controlMode = CONTROL_MODE_KEYBOARD;
				stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
			}
			public function disableKeyboardMode() {
				stage.removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
			}
			
			public function initMouseMode() {
				controlMode = CONTROL_MODE_MOUSE;
				stage.addEventListener(MouseEvent.CLICK, handleMouseClick);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
					
			}
			public function disableMouseMode() {
				stage.removeEventListener(MouseEvent.CLICK, handleMouseClick);
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
			}
			
			var motionTracker:MotionTracker;
			var motionTrackerTimer:Timer;
			var lastMotionTrackerY:Number;
			public function initWebcamMode() {
				scoreMultipliedBy = 2;
				controlMode = CONTROL_MODE_WEBCAM;
				if (motionTracker == null && motionTrackerTimer == null) {
					var camW : int = GAME_PLAY_AREA_W;
					var camH : int = GAME_PLAY_AREA_H;
					
					// Create the camera
					var cam : Camera = Camera.getCamera();
					cam.setMode(camW, camH, stage.frameRate);
					cam.addEventListener(StatusEvent.STATUS, camStatusHandler);
					
					// Create a video
					var vid : Video = new Video(camW, camH);
					vid.attachCamera(cam);
					
					// Create the Motion Tracker
					motionTracker = new MotionTracker(vid);
					
					motionTrackerTimer = new Timer(20, 0);
					motionTrackerTimer.addEventListener(TimerEvent.TIMER,
						function(event:Event) {
							// Tell the MotionTracker to update itself
							motionTracker.track();
							
							// If there is enough movement (see the MotionTracker's minArea property) then continue
							if ( !motionTracker.hasMovement ) return;
							
							var motionX:Number = motionTracker.motionArea.x + motionTracker.motionArea.width / 2;
							var motionY:Number = motionTracker.motionArea.y + motionTracker.motionArea.height / 2;
							
							
							// Move the target with some easing
							moveEffectOfFork.stop();
							moveEffectOfFork.xTo = forkContainer.width - motionX;
							moveEffectOfFork.yTo = FORK_Y;
							moveEffectOfFork.play();
//							if (Math.abs(gamePlayArea.y + gamePlayArea.height - motionY) < 100) {
//								forkDown();
//							}
							if (motionTracker.motionArea.y > camH * 1.5) {
								forkDown();
							}
//							if (motionY > 330) {
//								forkDown();
//							}
						}
					);
					motionTrackerTimer.start();
				} else {
					motionTrackerTimer.start();
				}
			}
			
			function camStatusHandler(event:StatusEvent) {
				switch (event.code)
				{
					case "Camera.Muted":
						//User clicked Deny
						Alert.show("Trò chơi không thể bắt đầu vì bạn đã từ chối cho phép sử dụng webcam.");
						break;
					case "Camera.Unmuted":
						//User clicked Accept
						startCountDown();
				}
			}
			
			public function disableWebcamMode() {
				motionTrackerTimer.stop();
			}
			
			public function initCurrentMode() {
				if (controlMode == CONTROL_MODE_KEYBOARD) {
					initKeyboardMode();
				} else if (controlMode == CONTROL_MODE_MOUSE) {
					initMouseMode();
				} else if (controlMode == CONTROL_MODE_WEBCAM) {
					initWebcamMode();
				}
			}
			public function disableCurrentMode() {
				if (controlMode == CONTROL_MODE_KEYBOARD) {
					disableKeyboardMode();
				} else if (controlMode == CONTROL_MODE_MOUSE) {
					disableMouseMode();
				} else if (controlMode == CONTROL_MODE_WEBCAM) {
					disableWebcamMode();
				}
			}
			
			public function handleKeyDown(event:KeyboardEvent):void {
				if (event.keyCode == 39) { //RIGHT
					moveForkHorizontally(20);
				} else if (event.keyCode == 37) {//LEFT	
					moveForkHorizontally(-20);
				} else if (event.keyCode == 40) {//DOWN
					forkDown();
				}
			}
			
			function handleMouseClick(event:MouseEvent):void {
				forkDown();
			}
			function handleMouseMove(event:MouseEvent):void {
				if ( gamePlayArea.getRect(this).contains(event.stageX, event.stageY) ) {
					fork.x = event.stageX;
				}
			}
			
			function finishGetHighScoreList(event:ResultEvent) {
				//add the title
				var top5Label:Label = new Label();
				top5Label.styleName = "top5Highscore";
				top5Label.text = "Top 5 điểm cao nhất";
				top5Label.percentWidth = 100;
				top5Label.height = 20;
				top5Label.x = 0;
				top5Label.y = 0;
				hightscoreList.addChild(top5Label);
				
				var JSONResArr:String = String(httpGetHightScoreList.lastResult);
				if (JSONResArr != null && JSONResArr.length > 0) {
					var arrHighscore:Array = JSON.decode(JSONResArr);
					if (arrHighscore != null) {
						var LINE_HEIGHT = 35;
						var n = 5;
						if (arrHighscore.length < n) n = arrHighscore.length;
						for (var i:int = 0; i < n; i++) {
							var hs = arrHighscore[i];
							
							var txtFullname:Label = new Label();
							txtFullname.styleName = "highscoreFullname";
							txtFullname.text = hs.fullname;
							txtFullname.width = hightscoreList.width - LINE_HEIGHT;
							txtFullname.height = LINE_HEIGHT;
							txtFullname.x = 0;
							txtFullname.y = i * LINE_HEIGHT + top5Label.height + 11;
							hightscoreList.addChild(txtFullname);
							
							var canvas:Canvas = new Canvas();
							canvas.styleName = "highscoreScoreBackground"; 
							canvas.width = 43;
							canvas.height = 43;
							canvas.x = hightscoreList.width - canvas.width;
							canvas.y = i * LINE_HEIGHT + top5Label.height - (canvas.width - LINE_HEIGHT)/2;
							
							var txtScore:Label = new Label();
							txtScore.styleName = "highscoreScoreText3Digit";
							txtScore.text = hs.score;
							txtScore.percentWidth = 100;
							txtScore.percentHeight = 100;
							txtScore.y = 12;
							if (txtScore.text.length > 3) {
								txtScore.styleName = "highscoreScoreText4Digit";
								txtScore.y = 13;
							}
							canvas.addChild(txtScore);
							
							hightscoreList.addChild(canvas);
						}
					}
				}
			}
		]]>
	</mx:Script>
	
	<mx:Canvas id="gamePlayArea" x="{GAME_PLAY_AREA_X}" y="{GAME_PLAY_AREA_Y}" width="{GAME_PLAY_AREA_W}" height="{GAME_PLAY_AREA_H}" 
			   horizontalScrollPolicy="off" verticalScrollPolicy="off">
	</mx:Canvas>
	
	<mx:Canvas id="clock" x="745" y="345" backgroundImage="@Embed(source='assets/clock.png')" width="98" height="46">
		<mx:Label id="time" text="00:00" styleName="time" textAlign="center" y="7" width="100%" height="100%"/>
	</mx:Canvas>
	
	<mx:Image id="bowl" source="@Embed(source='assets/girls.png')" x="190" y="0"/>
	
	<mx:Label id="score" x="320" y="260" width="100" styleName="score" text="0" textAlign="center" visible="false"/>
	
	<mx:Canvas id="forkContainer" x="{GAME_PLAY_AREA_X}" y="{GAME_PLAY_AREA_Y}" width="{GAME_PLAY_AREA_W}" height="{GAME_PLAY_AREA_H}"
			   horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:Image id="fork" source="@Embed(source='assets/chopstick.png')" x="{GAME_PLAY_AREA_W/2}" y="{FORK_Y}"/>
	</mx:Canvas>
	
	<mx:Image id="logo" source="@Embed(source='assets/icon.png')" x="697" y="263"/>
	
	<local:NoCachingHttpService
		id="httpGetHightScoreList"
		url="http://mekongmedia.com.vn/reeva3mien/highscore.php"
		method="GET"
		resultFormat="object"
		result="finishGetHighScoreList(event)"
		/>
	
	<mx:Label id="txtCountDown" styleName="countDownText" visible="false"
			  x="300" y="200"
			  textAlign="center"/>
	
	<mx:Zoom id="zoomIn" zoomWidthFrom="0" zoomWidthTo="1" zoomHeightFrom="0" zoomHeightTo="1" duration="300"/>

	<mx:Canvas id="finishBackground" styleName="backgroundFinish" width="100%" height="100%" visible="false"/>
	
	<mx:Canvas id="hightscoreList" x="772" y="102" width="165" height="200"
			   verticalScrollPolicy="off" horizontalScrollPolicy="off">
		
	</mx:Canvas>
</mx:Application>
